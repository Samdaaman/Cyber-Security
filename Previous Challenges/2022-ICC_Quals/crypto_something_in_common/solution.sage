from sage.all import*
from icecream import ic
from Crypto.Util.number import long_to_bytes

def crack(c1: int, e1: int, c2: int, e2: int, n: int):
    assert gcd(e1, e2) == 1, 'gcd(e1, e2) != 1'

    g, s, t = xgcd(e1, e2)
    ic(g, s, t)

    m = pow(c1, s, n) * pow(c2, t, n)
    ic(long_to_bytes(m))


def main():
    # TESTING
    # c1 = 21278404716914897172325614633995686083435866731406823822757012830776818357045243809655587819505192403308281769498646781767830325801026101882989774810968933668856749371978520316953203172640063675649308483610098515219769886851634236107538845336579635744953594131072998915808922022139696747480772705070841394543
    # e1 = 82639
    # c2 = 45709544976301860647367135721226988313925354468305265476531366999163066281473372763356041868221087173528620303274836745006404500056573223953904278591959031006202380150461272327909937864182959724014624228011971197750145045955031662418753007116275993301029212487074973871329535120933754110537052272563715289963
    # e2 = 82545
    # n = 106685311258886254765799894568530477743795132003972706054541491935839015201990808841185391035920497804423504718685170402216800611517084893924918524485599787527110193211076716970668396759567609264860385276341187900504228665813845802484544847396409922067901008393861649258455030559631303800187186961774086720817
    
    # REAL DEAL (from challenge)
    """
    Welcome to the totally awesome secure message encryptor!
    I heard about this encryption standard and wanted to try implement it myself.
    So I made a demonstration program. Give it a go! You can choose a few options
    for encrypting, and it'll give you back the encrypted message and the public
    key. 
    Options:
        0. 77593
        1. 44197
        2. 88681
        3. 4859
        4. 15497
    > 0
    Generating random number.......
    A sample encrypted text!
    C: 18906150797061638988419553739723069536266447603582778983382853452577815686930105313159477605805006031060556250793886735841683829849870089473825523590363159701051525961370649446477493665311639317176973825275687600002450057602187779579916535730395445025933403391351397097444876646233187050465787385704023849412
    e: 77593
    N: 101272016060463580554583764605412180116636118641435857378302942572928539506985394696783624632500352659695332265966468389485019152231847875061582250477505809229449425299010192789622966238414528746152348030361827347908545875038647265776949052088006912323258302000427770961277795026536835394578187800941315436507
    Would you like to generate a new one? [Y/n]
    > Y
    Options:
        0. 77593
        1. 44197
        2. 88681
        3. 4859
        4. 15497
    > 1
    Generating random number.......
    A sample encrypted text!
    C: 28857435768370872118953702125697961961564995789395816896974988464609295981954251380731656671057026054098433496986668240161886003085926503379327664631568420984089949880773700878059892386348378964496767672254321013744961432287111351473357911282237189099059351193540859027109051531028829124067271206351066201293
    e: 44197
    N: 101272016060463580554583764605412180116636118641435857378302942572928539506985394696783624632500352659695332265966468389485019152231847875061582250477505809229449425299010192789622966238414528746152348030361827347908545875038647265776949052088006912323258302000427770961277795026536835394578187800941315436507
    Would you like to generate a new one? [Y/n]
    """
    c1 = 18906150797061638988419553739723069536266447603582778983382853452577815686930105313159477605805006031060556250793886735841683829849870089473825523590363159701051525961370649446477493665311639317176973825275687600002450057602187779579916535730395445025933403391351397097444876646233187050465787385704023849412
    e1 = 77593
    c2 = 28857435768370872118953702125697961961564995789395816896974988464609295981954251380731656671057026054098433496986668240161886003085926503379327664631568420984089949880773700878059892386348378964496767672254321013744961432287111351473357911282237189099059351193540859027109051531028829124067271206351066201293
    e2 = 44197
    n = 101272016060463580554583764605412180116636118641435857378302942572928539506985394696783624632500352659695332265966468389485019152231847875061582250477505809229449425299010192789622966238414528746152348030361827347908545875038647265776949052088006912323258302000427770961277795026536835394578187800941315436507
    
    crack(c1, e1, c2, e2, n)


if __name__ == '__main__':
    main()
