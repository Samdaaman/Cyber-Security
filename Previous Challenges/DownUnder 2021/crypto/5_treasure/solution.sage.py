

# This file was *autogenerated* from the file solution.sage
from sage.all_cmdline import *   # import sage library

_sage_const_5754622710042474278449745314387128858128432138153608237186776198754180710586599008803960884 = Integer(5754622710042474278449745314387128858128432138153608237186776198754180710586599008803960884); _sage_const_13318541149847924181059947781626944578116183244453569385428199356433634355570023190293317369383937332224209312035684840187128538690152423242800697049469987 = Integer(13318541149847924181059947781626944578116183244453569385428199356433634355570023190293317369383937332224209312035684840187128538690152423242800697049469987); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_9 = Integer(9); _sage_const_4 = Integer(4); _sage_const_7 = Integer(7)
from pwn import *
from sage.all import *

FAKE_COORDS = _sage_const_5754622710042474278449745314387128858128432138153608237186776198754180710586599008803960884 
p = _sage_const_13318541149847924181059947781626944578116183244453569385428199356433634355570023190293317369383937332224209312035684840187128538690152423242800697049469987 

# context.log_level = 'debug'
io = process('python3 treasure.py', shell=True, raw=False)

def receive_int(prefix: str):
    line = io.recvline_contains(prefix.encode()).decode().strip().split(prefix)[_sage_const_1 ]
    return int(line)

def cuberoot(a, p):
    if p == _sage_const_2 :
        return a
    if p == _sage_const_3 :
        return a
    if (p%_sage_const_3 ) == _sage_const_2 :
        return pow(a,(_sage_const_2 *p - _sage_const_1 )/_sage_const_3 , p)
    if (p%_sage_const_9 ) == _sage_const_4 :
        root = pow(a,(_sage_const_2 *p + _sage_const_1 )/_sage_const_9 , p)
        if pow(root,_sage_const_3 ,p) == a%p:
            return root
        else:
            return None
    if (p%_sage_const_9 ) == _sage_const_7 :
        root = pow(a,(p + _sage_const_2 )/_sage_const_9 , p)
        if pow(root,_sage_const_3 ,p) == a%p:
            return root
        else:
            return None
    else:
        print("Not implemented yet. See the second paper")

s1 = receive_int('Your share is: ')
io.sendline(b'1')
r = receive_int('The secret is revealed: ')

secret = (s1**_sage_const_3  * r) % p
secret_inv = pow(secret, -_sage_const_1 , p)
r1_r2 = (s1 * secret_inv) % p
F = GF(p)
FAKE_COORDS_cuberoot = F(FAKE_COORDS).nth_root(_sage_const_3 )
secret_inv_cuberoot = F(secret_inv).nth_root(_sage_const_3 )
s1_fake = (FAKE_COORDS_cuberoot * secret_inv_cuberoot * s1) % p

io.sendline(f'{s1_fake}'.encode())
io.sendline(f'{secret}'.encode())

print(io.recvall().decode())

