

# This file was *autogenerated* from the file crack2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_512 = Integer(512); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_16 = Integer(16)
from Crypto.Util.number import getPrime, long_to_bytes, inverse
from sage.all_cmdline import *   # import sage library


class RSA:
    def __init__(self):
        self.p = getPrime(_sage_const_512 )
        self.q = getPrime(_sage_const_512 )
        self.e = _sage_const_3 
        self.n = self.p * self.q
        self.d = inverse(self.e, (self.p-_sage_const_1 )*(self.q-_sage_const_1 ))
    def encrypt(self, data: bytes) -> bytes:
        pt = int(data.hex(), _sage_const_16 )
        ct = pow(pt, self.e, self.n)
        return long_to_bytes(ct)
    def decrypt(self, data: bytes) -> bytes:
        ct = int(data.hex(), _sage_const_16 )
        pt = pow(ct, self.d, self.n)
        return long_to_bytes(pt)

with open('output.txt') as fh:
    ct = bytearray.fromhex(fh.read().strip().split(': ')[_sage_const_1 ])

# print(RSA().decrypt(ct))
# print(getPrime(512))

pt = int(ct.hex(), _sage_const_16 ) ** (_sage_const_1 /_sage_const_3 )
print(pt)
print(int(ct.hex(), _sage_const_16 ))
print(long_to_bytes(int(pt)))

