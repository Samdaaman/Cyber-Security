import itertools
from sage.all import *
from icecream import ic
from more_itertools import chunked
from Crypto.Util.number import bytes_to_long, getPrime, long_to_bytes
from multiprocessing.pool import Pool
from progress.bar import Bar


def rsa(p, e, ct):
    phi = p - 1

    # since gcd(phi, e) != 1
    # https://crypto.stackexchange.com/questions/81949/how-to-compute-m-value-from-rsa-if-phin-is-not-relative-prime-with-the-e/81966#81966
    ic(gcd(phi, e))
    d = pow(e, -1, phi // gcd(e, phi))
    pt_base = pow(ct, d, p)
    L = pow(2, (phi // gcd(e, phi)), p)

    for i in range(gcd(e, phi)):
        pt_i = pt_base * L**i % p
        ic(i, long_to_bytes(pt_i))


def dh(p, q, g, ct):
    # https://eprint.iacr.org/2016/644.pdf
    # x_pm1_options = pohlig_hellman(p, g, ct)
    # ic(x_pm1_options)
    x_pm1_options = {
        1333647771826129906056278980508785116695001357398405010264712880010822066437928270470093887443647579332557329757513503832688236838814545646539928049413880950956136391197700699813257009513030650710096103937450573603079886862042789301653172344151731360918260335579808862271014412080624561537897979314727207446470188301,
        3434244963062992318029402165182007506724362770032780687076096510102789790040825975678948026956975284751397851861923775818466324316450831418179479822432354402800379595388575948332005771749605417271874218453989402121806148843424102305842371539451936234044172088312769991725380431923301207286192474413645342645477314970
    }

    # x_qm1_options = pohlig_hellman(q, g, ct)
    # ic(x_qm1_options)
    x_qm1_options = { 2248237925279582319646346402167252499424555860028602832387207824347301477610684362756745372458799004275280799304910420404269790625413034441525997676464275232206297649095612480172888211521015846455387388707653809767187874172857528680924943045273311447383766726890650161662310150531795567852223701545458237821806704227 }

    for (x_pm1, x_qm1) in itertools.product(x_pm1_options, x_qm1_options):
        qm1_d = (q-1) // gcd(p-1, q-1)
        x = crt(x_pm1, x_qm1 % qm1_d, p-1, qm1_d)
        ic(long_to_bytes(x))


def pohlig_hellman(p, g, h):
    factors = factor(p - 1)
    F = GF(p)
    g = F(g)
    h = F(h)
    ic(factors)
    residuals_options = []
    modului = []
    for pi, ki in factors:
        lhs = h ^ ((p-1) // pi)
        rhs = g ^ ((p-1) // pi)
        x = discrete_log(lhs, rhs)
        ic(pi, x)
        if lhs == 1 and rhs == 1:
            residuals_options.append(list(range(pi)))
            print(f'Increasing result size by a {pi} times')
        else:
            residuals_options.append([x])
        modului.append(pi ^ ki)

    return set(crt(list(residuals), modului) for residuals in itertools.product(*residuals_options))


if __name__ == '__main__':
    # dh_test
    # RSA consts
    p = 0x16498bf7cc48a7465416e0f9ec8034f4030991e73aff9524ef74cc574228e36e6e1944c7686f69f0d1186a69b7aa77d7e954edc8a6932f006786f4648ecc8d4f4d3f6c03d9a1ee9fe61b28b6dd2791a63be581b8811a8ac90a387241ea68b7d36b4a274f64c7a721ad55cfcef23cd14c72542f576e4b507c11c4fa198e80021d484691b
    e = 0x69420
    ct1 = 0xa82b37d57b6476fa98f6ee7c278d934bd96c49aa1c5399552d25211230d76cb16ade049572bf631e3849903638d41c884957b9592d0aa072b2bdc3105fe0e3253284f85286ec613966f9cde77ae06e2053dc2254e44ca673b4c76879eff84e5fc32af976c1bfafe147a277d72aad674db749ed8f34d2ebe8189cf12afc9baa17764e4b
    rsa(p, e, ct1)

    # DH consts
    n = 0xbe30ccaf896c16f53515e298df25df9158d0a95295c119f0444398b94fae26c0b4cf3a43b120cf0fb657069e0621eb1d2dd832eef3065e80ddbc35854dd4585cc41fd6a5b36339c0d9fcc066272be6818be6a624f75482bbb9c408010ac8c27b20397d870bfcb14e6318097b1601f99e391c9b68c5c586f8da561ff8507be9212713b910b748370ce692c11afa09b74ce80c5f5dd72046415aeed85e1ecedca14abe17ed19ab97729b859120699d9f80dd13f8483773df15b938b8399702a6e846b8728a70f1940d4c6e5835a06a89925eb1ec91a796f270e2d9be1a2c4bee5517109c161f04333d9c0d4034fbbd2dcf69fe734b759a89937f4d8ea0ee6b8385aae14a2cce361
    g = 0x69420
    ct2 = 0x65d57a564b8a8667a956705442063392b9b975b8ef869a6dbed04d6e585351f559fe6f5d96823f60b7306740fe2cf5aa81e4a12736d4f0a4826cbc8b4312643af19c75432b4ab222837031851f312df5d707b39bdf2d272f25c1947f3e2943f3592cb0519fee8f4b458021b6b8ee4eabeeae5127d412df4f6a88f66d7cc34c6bb77e0a1440737d0e167f9489f0c7fbfd7f6a5870b4b2865d29b91f6c2b375951e85b1b9f03887d4d3c4a6218111a95021ed1d554c57269e7830c3e7b8e17d13e1fb75ee9f305833d0cb6bfab738572cdbbc8b33b878ad25f78d47d7f449a6c348f5f9f1df3e09f924534a3669b4e69bd0411d154ec756b210691e2efc4a55aa664d938a868f4d
    dh(p, n // p, g, ct2)
